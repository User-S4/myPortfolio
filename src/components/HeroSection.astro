---
import Button from './Button.astro';
---

<section class="relative min-h-[90vh] flex items-center justify-center overflow-hidden">
  <!-- Background Animation -->
  <div class="absolute inset-0 overflow-hidden z-0">
    <div id="hero-background" class="absolute inset-0 opacity-10 dark:opacity-20"></div>
  </div>
  
  <div class="container mx-auto px-4 md:px-6 z-10 py-16">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
      <div class="space-y-6 text-center lg:text-left">
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold leading-tight">
          <span class="block">Hi, I'm</span>
          <span class="text-primary-500">Arun Kumar S.</span>
        </h1>
        
        <div class="flex justify-center lg:justify-start">
          <div class="relative inline-flex h-12 overflow-hidden rounded-lg border border-neutral-200 dark:border-neutral-700 bg-white dark:bg-neutral-800 p-[1px]">
            <span class="absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#0055FF_0%,#00C2FF_50%,#FFB800_100%)]" />
            <div class="inline-flex h-full w-full items-center justify-center rounded-lg bg-white dark:bg-neutral-800 px-3 py-1 text-sm font-medium text-neutral-800 dark:text-neutral-200 backdrop-blur-3xl">
              <span id="typewriter" class="text-lg">
                Computer Science Student
              </span>
            </div>
          </div>
        </div>
        
        <p class="text-lg text-neutral-600 dark:text-neutral-400 max-w-xl mx-auto lg:mx-0">
          A passionate Computer Science student at the University of Wollongong in Dubai with a focus on creating innovative solutions through technology and design.
        </p>
        
        <div class="flex flex-wrap gap-4 justify-center lg:justify-start">
          <Button href="/projects" variant="primary" size="lg">View My Work</Button>
          <Button href="/contact" variant="outline" size="lg">Contact Me</Button>
        </div>
        
        <!-- Social Links -->
        <div class="pt-4 flex gap-6 justify-center lg:justify-start">
          <a href="https://github.com/" target="_blank" rel="noopener noreferrer" aria-label="GitHub" class="text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
          </a>
          <a href="https://linkedin.com/" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn" class="text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/></svg>
          </a>
          <a href="https://twitter.com/" target="_blank" rel="noopener noreferrer" aria-label="Twitter" class="text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/></svg>
          </a>
        </div>
      </div>
      
      <div class="flex justify-center lg:justify-end">
        <div class="relative w-64 h-64 md:w-80 md:h-80 lg:w-96 lg:h-96 rounded-full overflow-hidden border-4 border-white dark:border-neutral-800 shadow-xl">
          <div class="absolute inset-0 bg-gradient-to-br from-primary-500 to-secondary-500 opacity-80"></div>
          <img 
            src="https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80" 
            alt="Arun Kumar S. J." 
            class="absolute inset-0 w-full h-full object-cover mix-blend-multiply"
          />
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex flex-col items-center animate-pulse-slow">
    <span class="text-sm text-neutral-600 dark:text-neutral-400 mb-2">Scroll Down</span>
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
    </svg>
  </div>
</section>

<script>
  // Typewriter effect
  document.addEventListener('astro:page-load', () => {
    const typewriterElement = document.getElementById('typewriter');
    if (!typewriterElement) return;
    
    const titles = [
      'Computer Science Student',
      'Web Developer',
      'UI/UX Enthusiast',
      'Problem Solver'
    ];
    
    let titleIndex = 0;
    let charIndex = 0;
    let isDeleting = false;
    let typingSpeed = 100;
    
    function typeWriter() {
      const currentTitle = titles[titleIndex];
      
      if (isDeleting) {
        // Deleting text
        typewriterElement.textContent = currentTitle.substring(0, charIndex - 1);
        charIndex--;
        typingSpeed = 50;
      } else {
        // Typing text
        typewriterElement.textContent = currentTitle.substring(0, charIndex + 1);
        charIndex++;
        typingSpeed = 100;
      }
      
      // If finished typing the word
      if (!isDeleting && charIndex === currentTitle.length) {
        isDeleting = true;
        typingSpeed = 1000; // Pause at end of word
      }
      
      // If finished deleting the word
      if (isDeleting && charIndex === 0) {
        isDeleting = false;
        titleIndex = (titleIndex + 1) % titles.length;
      }
      
      setTimeout(typeWriter, typingSpeed);
    }
    
    // Start the typewriter effect
    typeWriter();
    
    // Animated background
    const backgroundElement = document.getElementById('hero-background');
    if (backgroundElement) {
      const createParticle = () => {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // Random position
        const x = Math.random() * 100;
        const y = Math.random() * 100;
        
        // Random size
        const size = Math.random() * 40 + 20;
        
        // Random color
        const colors = ['#0055FF', '#00C2FF', '#FFB800'];
        const color = colors[Math.floor(Math.random() * colors.length)];
        
        // Set styles
        particle.style.cssText = `
          position: absolute;
          top: ${y}%;
          left: ${x}%;
          width: ${size}px;
          height: ${size}px;
          border-radius: 50%;
          background: ${color};
          filter: blur(${size/2}px);
          opacity: ${Math.random() * 0.5 + 0.1};
          animation: float ${Math.random() * 10 + 10}s linear infinite;
        `;
        
        backgroundElement.appendChild(particle);
        
        // Remove after animation
        setTimeout(() => {
          particle.remove();
        }, 20000);
      };
      
      // Create initial particles
      for (let i = 0; i < 10; i++) {
        createParticle();
      }
      
      // Continue creating particles
      setInterval(createParticle, 2000);
    }
  });
</script>

<style>
  @keyframes float {
    0% {
      transform: translate(0, 0) rotate(0deg);
    }
    25% {
      transform: translate(10%, 10%) rotate(90deg);
    }
    50% {
      transform: translate(0, 20%) rotate(180deg);
    }
    75% {
      transform: translate(-10%, 10%) rotate(270deg);
    }
    100% {
      transform: translate(0, 0) rotate(360deg);
    }
  }
</style>